rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow reading other users' profiles for matching (but not sensitive data)
      allow read: if request.auth != null && 
        resource.data.keys().hasAll(['name', 'skillsHave', 'skillsToLearn', 'location', 'bio']);
    }
    
    // Matches collection - users can only access matches they're part of
    match /matches/{matchId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.users;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.users;
    }
    
    // Messages subcollection within matches
    match /matches/{matchId}/messages/{messageId} {
      allow read, create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users;
      // Users can only create messages with their own ID as senderId
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
    }
    
    // Notifications collection - users can only access notifications sent to them or sent by them
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.targetUserId || request.auth.uid == resource.data.requesterId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.requesterId;
    }
    
    // Storage rules (for file uploads)
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}
